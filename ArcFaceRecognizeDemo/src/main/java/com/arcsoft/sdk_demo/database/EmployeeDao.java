package com.arcsoft.sdk_demo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.sdk_demo.entity.Employee;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYEE".
*/
public class EmployeeDao extends AbstractDao<Employee, Long> {

    public static final String TABLENAME = "EMPLOYEE";

    /**
     * Properties of entity Employee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UUId = new Property(1, String.class, "UUId", false, "UUId");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
        public final static Property JobNumber = new Property(3, String.class, "jobNumber", false, "jobNumber");
        public final static Property RegisterPicName = new Property(4, String.class, "registerPicName", false, "registerPicName");
        public final static Property RegisterFeater = new Property(5, byte[].class, "registerFeater", false, "registerFeater");
    }


    public EmployeeDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UUId\" TEXT UNIQUE ," + // 1: UUId
                "\"name\" TEXT NOT NULL ," + // 2: name
                "\"jobNumber\" TEXT," + // 3: jobNumber
                "\"registerPicName\" TEXT," + // 4: registerPicName
                "\"registerFeater\" BLOB NOT NULL );"); // 5: registerFeater
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UUId = entity.getUUId();
        if (UUId != null) {
            stmt.bindString(2, UUId);
        }
        stmt.bindString(3, entity.getName());
 
        String jobNumber = entity.getJobNumber();
        if (jobNumber != null) {
            stmt.bindString(4, jobNumber);
        }
 
        String registerPicName = entity.getRegisterPicName();
        if (registerPicName != null) {
            stmt.bindString(5, registerPicName);
        }
        stmt.bindBlob(6, entity.getRegisterFeater());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UUId = entity.getUUId();
        if (UUId != null) {
            stmt.bindString(2, UUId);
        }
        stmt.bindString(3, entity.getName());
 
        String jobNumber = entity.getJobNumber();
        if (jobNumber != null) {
            stmt.bindString(4, jobNumber);
        }
 
        String registerPicName = entity.getRegisterPicName();
        if (registerPicName != null) {
            stmt.bindString(5, registerPicName);
        }
        stmt.bindBlob(6, entity.getRegisterFeater());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Employee readEntity(Cursor cursor, int offset) {
        Employee entity = new Employee( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UUId
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jobNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // registerPicName
            cursor.getBlob(offset + 5) // registerFeater
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Employee entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUUId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setJobNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegisterPicName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegisterFeater(cursor.getBlob(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Employee entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Employee entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Employee entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
